// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/G-Villarinho/social-network/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ContextService is an autogenerated mock type for the ContextService type
type ContextService struct {
	mock.Mock
}

// GetUserID provides a mock function with given fields: ctx
func (_m *ContextService) GetUserID(ctx context.Context) uuid.UUID {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUserID")
	}

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(context.Context) uuid.UUID); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

// Session provides a mock function with given fields: ctx
func (_m *ContextService) Session(ctx context.Context) (*domain.Session, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Session")
	}

	var r0 *domain.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*domain.Session, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *domain.Session); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewContextService creates a new instance of ContextService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContextService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContextService {
	mock := &ContextService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

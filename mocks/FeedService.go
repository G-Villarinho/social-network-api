// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/G-Villarinho/social-network/domain"
	mock "github.com/stretchr/testify/mock"
)

// FeedService is an autogenerated mock type for the FeedService type
type FeedService struct {
	mock.Mock
}

// GetFeed provides a mock function with given fields: ctx, page, limit
func (_m *FeedService) GetFeed(ctx context.Context, page int, limit int) (*domain.Pagination[*domain.PostResponse], error) {
	ret := _m.Called(ctx, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetFeed")
	}

	var r0 *domain.Pagination[*domain.PostResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (*domain.Pagination[*domain.PostResponse], error)); ok {
		return rf(ctx, page, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *domain.Pagination[*domain.PostResponse]); ok {
		r0 = rf(ctx, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Pagination[*domain.PostResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFeedService creates a new instance of FeedService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFeedService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FeedService {
	mock := &FeedService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

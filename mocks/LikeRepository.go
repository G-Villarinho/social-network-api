// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/G-Villarinho/social-network/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// LikeRepository is an autogenerated mock type for the LikeRepository type
type LikeRepository struct {
	mock.Mock
}

// CreateLike provides a mock function with given fields: ctx, like
func (_m *LikeRepository) CreateLike(ctx context.Context, like domain.Like) error {
	ret := _m.Called(ctx, like)

	if len(ret) == 0 {
		panic("no return value specified for CreateLike")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Like) error); ok {
		r0 = rf(ctx, like)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLike provides a mock function with given fields: ctx, like
func (_m *LikeRepository) DeleteLike(ctx context.Context, like domain.Like) error {
	ret := _m.Called(ctx, like)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLike")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Like) error); ok {
		r0 = rf(ctx, like)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLikedPostIDs provides a mock function with given fields: ctx, userID
func (_m *LikeRepository) GetLikedPostIDs(ctx context.Context, userID uuid.UUID) (map[uuid.UUID]bool, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetLikedPostIDs")
	}

	var r0 map[uuid.UUID]bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (map[uuid.UUID]bool, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) map[uuid.UUID]bool); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uuid.UUID]bool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserLikedPost provides a mock function with given fields: ctx, ID, userID
func (_m *LikeRepository) UserLikedPost(ctx context.Context, ID uuid.UUID, userID uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, ID, userID)

	if len(ret) == 0 {
		panic("no return value specified for UserLikedPost")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (bool, error)); ok {
		return rf(ctx, ID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(ctx, ID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, ID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserLikedPosts provides a mock function with given fields: ctx, userID, postIDs
func (_m *LikeRepository) UserLikedPosts(ctx context.Context, userID uuid.UUID, postIDs []uuid.UUID) ([]uuid.UUID, error) {
	ret := _m.Called(ctx, userID, postIDs)

	if len(ret) == 0 {
		panic("no return value specified for UserLikedPosts")
	}

	var r0 []uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []uuid.UUID) ([]uuid.UUID, error)); ok {
		return rf(ctx, userID, postIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []uuid.UUID) []uuid.UUID); ok {
		r0 = rf(ctx, userID, postIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, []uuid.UUID) error); ok {
		r1 = rf(ctx, userID, postIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLikeRepository creates a new instance of LikeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLikeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *LikeRepository {
	mock := &LikeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
